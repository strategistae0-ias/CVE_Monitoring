name: CVE Alert

on:
  workflow_run:
    workflows: ["CVE Monitor"]
    types:
      - completed

jobs:
  alert:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  

      - name: Ensure jq is available
        run: sudo apt-get install -y jq
      - run: pip install reportlab

      - name: Extract previous results.json
        run: |
          git show HEAD^:output/results.json > old_results.json || echo '{"results":[]}' > old_results.json

      - name: Compare CVEs
        id: compare
        run: |
          NEW_IDS=$(jq -r '.results[].id' output/results.json)
          OLD_IDS=$(jq -r '.results[].id' old_results.json)
      
          > output/new_ids.txt  # clear the file
      
          trigger=false
          for id in $NEW_IDS; do
            if ! echo "$OLD_IDS" | grep -qx "$id"; then
              echo "Found new CVE: $id"
              echo "$id" >> output/new_ids.txt
              trigger=true
            fi
          done
      
          if [ "$trigger" = true ]; then
            echo "trigger_alert=true" >> $GITHUB_OUTPUT
          else
            echo "trigger_alert=false" >> $GITHUB_OUTPUT
          fi


      - name: Commit new_ids.txt
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add output/new_ids.txt
          git commit -m "Update new_ids.txt [skip ci]" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Generate PDF Report
        run: |
          python generate_pdf_report.py
  
      - name: Upload Report
        uses: actions/upload-artifact@v4
        with:
          name: cve-report
          path: output/cve-report.pdf

      - name: Commit PDF with PAT
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}
          git add output/cve-report.pdf
          git commit -m "Update CVE PDF report [skip ci]" || echo "No changes to commit"
          git push

      - name: Get Artifact ID
        id: get_artifact
        run: |
          ARTIFACT_NAME="cve-report"
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts")
          
          ARTIFACT_ID=$(echo "$RESPONSE" | jq -r ".artifacts[] | select(.name==\"$ARTIFACT_NAME\") | .id")
          if [ -z "$ARTIFACT_ID" ]; then
            echo "Artifact not found!"
            exit 1
          fi
          echo "artifact_id=$ARTIFACT_ID" >> $GITHUB_OUTPUT

      - name: Debug output
        run: |
          echo "Old IDs:"
          cat old_results.json | jq '.results[].id'
          echo "New IDs:"
          cat output/results.json | jq '.results[].id'
          echo "Trigger: ${{ steps.compare.outputs.trigger_alert }}"

      - name: Format and send Teams alert
        if: steps.compare.outputs.trigger_alert == 'true'
        run: |
          MESSAGE="ðŸš¨ *New CVEs detected!*<br><br>"
          for id in $(cat output/new_ids.txt); do
            entry=$(jq -r --arg id "$id" '.results[] | select(.id==$id)' output/results.json)
            sdk=$(echo "$entry" | jq -r '.sdk')
            desc=$(echo "$entry" | jq -r '.description')
            ref=$(echo "$entry" | jq -r '.reference // empty')
            [ -z "$ref" ] && ref="https://nvd.nist.gov/vuln/detail/$id"
            MESSAGE+="<b>$id</b><br>SDK: $sdk<br>$desc<br><a href=\"$ref\">$ref</a><br><br>"
          done
      
          ARTIFACT_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ steps.get_artifact.outputs.artifact_id }}"
          MESSAGE+="ðŸ“Ž <a href='${ARTIFACT_URL}'>Download PDF Report</a>"
      
          TEXT=$(echo "$MESSAGE" | jq -Rs .)
          curl -H "Content-Type: application/json" \
               -d "{\"text\": $TEXT}" \
               ${{ secrets.TEAMS_WEBHOOK_URL }}
